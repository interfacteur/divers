<snippet>
	<content><![CDATA[


schéma data URI :

uuencode -m image xx
	dans le Terminal
	pour un fichier en entrée
	pour du base64 en sortie
btoa("chaine");
	en JavaScript
	pour une chaîne en entrée
	pour du base64 en sortie
encodeURIComponent();
	en JavaScript
	pour une chaîne en entrée
	pour une url en sortie
il y a aussi atob();



quantificateurs réticents vs gourmands
	nb : https://jsperf.com/operateur-reticent-expressions-regulieres
https://regex101.com/r/967yqK/1
d'après http://www.js-attitude.fr/2012/08/13/enfin-maitriser-les-expressions-rationnelles/



http://stackoverflow.com/questions/1760126/how-do-i-choose-between-innertext-or-nodevalue
	How do I choose between innerText or nodeValue?
http://stackoverflow.com/questions/21311299/nodevalue-vs-innerhtml-and-textcontent-how-to-choose
	nodeValue vs innerHTML and textContent. How to choose?
	d'où :
	nodeValue is a little more confusing to use, but faster than innerHTML.
	innerHTML parses content as HTML and takes longer.
	textContent uses straight text, does not parse HTML, and is faster.
https://developer.mozilla.org/fr/docs/Web/API/Node/nodeValue
https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue
	assez complexe (cf. "more confusing to use") :
	let sortie = document.querySelector("pre");
		sortie.firstChild.nodeValue = "<p>x</p>"; // erreur pour <pre></pre> ok avec <pre> </pre>
		pour
		sortie.textContent = "<p>X</p>";
en tout cas, ni nodeValue ni textContent ne parsent le HTML
	un jsperf à faire ?


vs innerText (à éviter ?) :
https://developer.mozilla.org/fr/docs/Web/API/Node/textContent
https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent



scroll : cf. DOCUscroll.sublime-snippet
commentaires cond. : cf. DOCUcommentaires.sublime-snippet




.classe	{
	avec: tout;
}
.classe:not(.ie8)	{
	sans: IE8 et alii;
}




http://keithclark.co.uk/articles/pure-css-parallax-websites/

scale(1 - translateZ / perspective)
1 + (translateZ * -1) / perspective




@media only screen and (min-width: 801px)	{

}


	-webkit-
	-moz-
	-ms-
	-o-

	-webkit-
	-moz-
	-o-


-webkit-transform: translateZ(0);
-moz-transform: translateZ(0);
-o-transform: translateZ(0);
transform: translateZ(0);


@-webkit-keyframes loupe
{	0%		{	;
			}
	100%	{	;
}			}
@-moz-keyframes loupe
{	0%		{	;
			}
	100%	{	;
}			}
@-o-keyframes loupe
{	0%		{	;
			}
	100%	{	;
}			}
@keyframes loupe
{	0%		{	;
			}
	100%	{	;
}			}

@-webkit-keyframes loupe
{	0%		{	-webkit-transform: scale(3) translateZ(0);
			}
	100%	{	-webkit-transform: scale(3) translateZ(0);
}			}
@-moz-keyframes loupe
{	0%		{	-moz-transform: scale(3) translateZ(0);
			}
	100%	{	-moz-transform: scale(3) translateZ(0);
}			}
@-o-keyframes loupe
{	0%		{	-o-transform: scale(3) translateZ(0);
			}
	100%	{	-o-transform: scale(3) translateZ(0);
}			}
@keyframes loupe
{	0%		{	transform: scale(3) translateZ(0);
			}
	100%	{	transform: scale(3) translateZ(0);
}			}




PHP :

<!-- <form action=""> -->
<form action="<?php echo htmlspecialchars($_SERVER['REQUEST_URI'], ENT_QUOTES); ?>">

function getF($name) {
	return	(count($_GET) > 0 && isset($_GET[$name])) ? htmlentities($_GET[$name]) :
		(
			(count($_POST) > 0 && isset($_POST[$name])) ? htmlentities($_POST[$name]) :
			false
		);
}



]]></content>
	<tabTrigger>syntaxe</tabTrigger>
</snippet>
